// <auto-generated />
using System;
using ClickNCheck.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClickNCheck.Migrations
{
    [DbContext(typeof(ClickNCheckContext))]
    partial class ClickNCheckContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClickNCheck.Models.BillingAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<int>("OrganisationID");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<string>("Province")
                        .IsRequired();

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("Suburb")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID")
                        .IsUnique();

                    b.ToTable("BillingAddress");
                });

            modelBuilder.Entity("ClickNCheck.Models.Candidate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("ID_Passport");

                    b.Property<string>("ID_Type");

                    b.Property<string>("Maiden_Surname");

                    b.Property<string>("Name");

                    b.Property<int?>("OrganisationID");

                    b.Property<string>("Phone");

                    b.Property<int?>("RecruiterID");

                    b.Property<string>("Surname");

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID");

                    b.HasIndex("RecruiterID");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("ClickNCheck.Models.Candidate_JobProfile", b =>
                {
                    b.Property<int>("CandidateId");

                    b.Property<int>("JobProfileId");

                    b.HasKey("CandidateId", "JobProfileId");

                    b.HasIndex("JobProfileId");

                    b.ToTable("Candidate_JobProfile");
                });

            modelBuilder.Entity("ClickNCheck.Models.Checks", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TurnaraoundTime");

                    b.HasKey("ID");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("ClickNCheck.Models.ContactPerson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganisationID");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID")
                        .IsUnique();

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("ClickNCheck.Models.JobProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("OrganisationID");

                    b.Property<string>("Title");

                    b.Property<bool>("isCompleted");

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("JobProfile");
                });

            modelBuilder.Entity("ClickNCheck.Models.JobProfile_Checks", b =>
                {
                    b.Property<int>("ChecksId");

                    b.Property<int>("JobProfileId");

                    b.Property<int>("order");

                    b.HasKey("ChecksId", "JobProfileId");

                    b.HasIndex("JobProfileId");

                    b.ToTable("JobProfile_Checks");
                });

            modelBuilder.Entity("ClickNCheck.Models.Organisation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RegistrationNumber")
                        .IsRequired();

                    b.Property<string>("TaxNumber")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("ClickNCheck.Models.PhysicalAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Building")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<int>("OrganisationID");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<string>("Province")
                        .IsRequired();

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("Suburb")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID")
                        .IsUnique();

                    b.ToTable("PhysicalAddress");
                });

            modelBuilder.Entity("ClickNCheck.Models.Recruiter_JobProfile", b =>
                {
                    b.Property<int>("RecruiterId");

                    b.Property<int>("JobProfileId");

                    b.HasKey("RecruiterId", "JobProfileId");

                    b.HasIndex("JobProfileId");

                    b.ToTable("Recruiter_JobProfile");
                });

            modelBuilder.Entity("ClickNCheck.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("EmployeeNumber");

                    b.Property<string>("ManagerID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganisationID");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<string>("UserType")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("OrganisationID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClickNCheck.Models.BillingAddress", b =>
                {
                    b.HasOne("ClickNCheck.Models.Organisation", "Organisation")
                        .WithOne("BillingAddress")
                        .HasForeignKey("ClickNCheck.Models.BillingAddress", "OrganisationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClickNCheck.Models.Candidate", b =>
                {
                    b.HasOne("ClickNCheck.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID");

                    b.HasOne("ClickNCheck.Models.User", "Recruiter")
                        .WithMany()
                        .HasForeignKey("RecruiterID");
                });

            modelBuilder.Entity("ClickNCheck.Models.Candidate_JobProfile", b =>
                {
                    b.HasOne("ClickNCheck.Models.Candidate", "Candidate")
                        .WithMany("Candidate_JobProfile")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClickNCheck.Models.JobProfile", "JobProfile")
                        .WithMany("Candidate_JobProfile")
                        .HasForeignKey("JobProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClickNCheck.Models.ContactPerson", b =>
                {
                    b.HasOne("ClickNCheck.Models.Organisation", "Organisation")
                        .WithOne("ContactPerson")
                        .HasForeignKey("ClickNCheck.Models.ContactPerson", "OrganisationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClickNCheck.Models.JobProfile", b =>
                {
                    b.HasOne("ClickNCheck.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID");
                });

            modelBuilder.Entity("ClickNCheck.Models.JobProfile_Checks", b =>
                {
                    b.HasOne("ClickNCheck.Models.Checks", "Checks")
                        .WithMany("JobProfile_Checks")
                        .HasForeignKey("ChecksId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClickNCheck.Models.JobProfile", "JobProfile")
                        .WithMany("JobProfile_Checks")
                        .HasForeignKey("JobProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClickNCheck.Models.PhysicalAddress", b =>
                {
                    b.HasOne("ClickNCheck.Models.Organisation", "Organisation")
                        .WithOne("PhysicalAddress")
                        .HasForeignKey("ClickNCheck.Models.PhysicalAddress", "OrganisationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClickNCheck.Models.Recruiter_JobProfile", b =>
                {
                    b.HasOne("ClickNCheck.Models.JobProfile", "JobProfile")
                        .WithMany("Recruiter_JobProfile")
                        .HasForeignKey("JobProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClickNCheck.Models.User", "Recruiter")
                        .WithMany("Recruiter_JobProfile")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClickNCheck.Models.User", b =>
                {
                    b.HasOne("ClickNCheck.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
